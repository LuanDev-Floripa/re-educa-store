"""
Servi√ßo de IA Inteligente RE-EDUCA Store
"""
import logging
import re
from typing import Dict, Any, List, Optional
from datetime import datetime
from config.database import supabase_client

logger = logging.getLogger(__name__)

class AIService:
    def __init__(self):
        self.logger = logger
        self.supabase = supabase_client
        
    def process_chat_message(self, user_id: str, message: str) -> Dict[str, Any]:
        """Processa mensagem do chat com IA"""
        try:
            # Analisa a inten√ß√£o da mensagem
            intent = self._analyze_intent(message)
            
            # Gera resposta baseada na inten√ß√£o
            response = self._generate_response(user_id, message, intent)
            
            # Salva a conversa no hist√≥rico
            self._save_chat_message(user_id, message, response['response'])
            
            return {
                'success': True,
                'data': response
            }
            
        except Exception as e:
            self.logger.error(f"Erro ao processar mensagem: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def _analyze_intent(self, message: str) -> str:
        """Analisa a inten√ß√£o da mensagem do usu√°rio"""
        message_lower = message.lower()
        
        # Padr√µes de inten√ß√£o
        if any(word in message_lower for word in ['imc', 'peso', 'altura', 'massa corporal']):
            return 'imc_calculation'
        elif any(word in message_lower for word in ['exerc√≠cio', 'treino', 'muscula√ß√£o', 'cardio']):
            return 'exercise_recommendation'
        elif any(word in message_lower for word in ['alimenta√ß√£o', 'comida', 'nutri√ß√£o', 'dieta']):
            return 'nutrition_advice'
        elif any(word in message_lower for word in ['produto', 'comprar', 'loja', 'suplemento']):
            return 'product_recommendation'
        elif any(word in message_lower for word in ['sa√∫de', 'bem-estar', 'fitness']):
            return 'health_advice'
        elif any(word in message_lower for word in ['obrigado', 'valeu', 'thanks']):
            return 'gratitude'
        else:
            return 'general'
    
    def _generate_response(self, user_id: str, message: str, intent: str) -> Dict[str, Any]:
        """Gera resposta baseada na inten√ß√£o"""
        
        if intent == 'imc_calculation':
            return {
                'response': "Para calcular seu IMC, voc√™ precisa da sua altura e peso. Use nossa calculadora de IMC em Ferramentas de Sa√∫de! Ela n√£o s√≥ calcula seu IMC, mas tamb√©m fornece uma classifica√ß√£o e recomenda√ß√µes personalizadas baseadas no resultado.",
                'suggestions': [
                    'Como interpretar meu IMC?',
                    'Qual √© o IMC ideal para minha idade?',
                    'Como melhorar meu IMC?'
                ],
                'related_topics': ['IMC', 'peso', 'altura', 'sa√∫de']
            }
        
        elif intent == 'exercise_recommendation':
            return {
                'response': "Excelente! Exerc√≠cios s√£o fundamentais para a sa√∫de. Nossa plataforma oferece uma biblioteca completa de exerc√≠cios categorizados por dificuldade, grupos musculares e equipamentos necess√°rios. Que tipo de exerc√≠cio voc√™ gostaria de fazer?",
                'suggestions': [
                    'Exerc√≠cios para iniciantes',
                    'Treino de muscula√ß√£o',
                    'Exerc√≠cios cardiovasculares',
                    'Treino em casa sem equipamentos'
                ],
                'related_topics': ['exerc√≠cios', 'fitness', 'treino', 'muscula√ß√£o']
            }
        
        elif intent == 'nutrition_advice':
            return {
                'response': "A alimenta√ß√£o √© a base da sa√∫de! Nossa plataforma oferece um di√°rio alimentar completo, calculadora de calorias e recomenda√ß√µes nutricionais personalizadas. Voc√™ pode registrar suas refei√ß√µes e acompanhar seus macronutrientes diariamente.",
                'suggestions': [
                    'Como calcular minhas calorias di√°rias?',
                    'Quais alimentos s√£o mais nutritivos?',
                    'Como fazer um di√°rio alimentar?',
                    'Receitas saud√°veis'
                ],
                'related_topics': ['nutri√ß√£o', 'alimenta√ß√£o', 'calorias', 'dieta']
            }
        
        elif intent == 'product_recommendation':
            return {
                'response': "Nossa loja oferece produtos cuidadosamente selecionados para sua sa√∫de e bem-estar! Com base no seu perfil e objetivos, posso recomendar suplementos, equipamentos de exerc√≠cio e produtos de sa√∫de personalizados.",
                'suggestions': [
                    'Suplementos para iniciantes',
                    'Equipamentos de exerc√≠cio',
                    'Produtos para perda de peso',
                    'Suplementos para ganho de massa'
                ],
                'related_topics': ['produtos', 'suplementos', 'equipamentos', 'loja']
            }
        
        elif intent == 'health_advice':
            return {
                'response': "Sa√∫de e bem-estar s√£o nossa prioridade! Nossa plataforma combina tecnologia e conhecimento para oferecer orienta√ß√µes personalizadas. Use nossas ferramentas de sa√∫de para acompanhar seu progresso e receber insights valiosos.",
                'suggestions': [
                    'Como criar um plano de sa√∫de?',
                    'Ferramentas de monitoramento',
                    'Dicas de bem-estar',
                    'Como manter a motiva√ß√£o?'
                ],
                'related_topics': ['sa√∫de', 'bem-estar', 'fitness', 'qualidade de vida']
            }
        
        elif intent == 'gratitude':
            return {
                'response': "De nada! Fico feliz em poder ajudar. Estou aqui sempre que precisar de orienta√ß√µes sobre sa√∫de, exerc√≠cios, nutri√ß√£o ou qualquer d√∫vida sobre nossa plataforma. Continue cuidando da sua sa√∫de! üí™",
                'suggestions': [
                    'Como posso melhorar ainda mais?',
                    'Novas funcionalidades da plataforma',
                    'Dicas de motiva√ß√£o'
                ],
                'related_topics': ['motiva√ß√£o', 'progresso', 'objetivos']
            }
        
        else:
            return {
                'response': f"Ol√°! Entendi que voc√™ disse: '{message}'. Sou seu assistente de IA personalizado e posso ajudar com recomenda√ß√µes de sa√∫de, exerc√≠cios, nutri√ß√£o, produtos e muito mais! Como posso te ajudar hoje?",
                'suggestions': [
                    'Recomende exerc√≠cios para mim',
                    'Como melhorar minha alimenta√ß√£o?',
                    'Calcular meu IMC',
                    'Ver produtos recomendados'
                ],
                'related_topics': ['sa√∫de', 'exerc√≠cios', 'nutri√ß√£o', 'produtos']
            }
    
    def _save_chat_message(self, user_id: str, user_message: str, ai_response: str):
        """Salva mensagem no hist√≥rico de chat"""
        try:
            chat_data = {
                'user_id': user_id,
                'user_message': user_message,
                'ai_response': ai_response,
                'created_at': datetime.now().isoformat()
            }
            
            result = self.supabase.table('ai_chat_history').insert(chat_data).execute()
            return result
            
        except Exception as e:
            self.logger.error(f"Erro ao salvar chat: {str(e)}")
            # N√£o falha a opera√ß√£o se n√£o conseguir salvar
    
    def get_chat_history(self, user_id: str, limit: int = 50) -> Dict[str, Any]:
        """Obt√©m hist√≥rico de chat do usu√°rio"""
        try:
            result = self.supabase.table('ai_chat_history')\
                .select('*')\
                .eq('user_id', user_id)\
                .order('created_at', desc=True)\
                .limit(limit)\
                .execute()
            
            return {
                'success': True,
                'data': result.data or []
            }
            
        except Exception as e:
            self.logger.error(f"Erro ao obter hist√≥rico: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def analyze_image(self, user_id: str, image_file, analysis_type: str = 'general') -> Dict[str, Any]:
        """Analisa imagem com IA"""
        try:
            # Simula an√°lise baseada no tipo
            if analysis_type == 'food':
                return {
                    'success': True,
                    'data': {
                        'food_name': 'Alimento Identificado',
                        'description': 'Este parece ser um alimento saud√°vel. Recomendo verificar as informa√ß√µes nutricionais.',
                        'confidence': 85.0,
                        'category': 'Alimento',
                        'nutritional_info': {
                            'calories': '~200 kcal',
                            'protein': '~15g',
                            'carbs': '~25g',
                            'fat': '~8g'
                        },
                        'recommendations': [
                            'Adicione este alimento ao seu di√°rio alimentar',
                            'Verifique a por√ß√£o adequada para seus objetivos',
                            'Combine com outros alimentos nutritivos'
                        ]
                    }
                }
            elif analysis_type == 'exercise':
                return {
                    'success': True,
                    'data': {
                        'exercise_name': 'Exerc√≠cio Identificado',
                        'description': 'Este exerc√≠cio √© excelente para fortalecimento muscular.',
                        'confidence': 80.0,
                        'difficulty': 'Intermedi√°rio',
                        'muscle_groups': ['Peito', 'Ombros', 'Tr√≠ceps'],
                        'equipment': 'Peso livre',
                        'form_tips': [
                            'Mantenha a postura ereta',
                            'Controle o movimento',
                            'Respire corretamente durante o exerc√≠cio'
                        ]
                    }
                }
            else:
                return {
                    'success': True,
                    'data': {
                        'description': 'An√°lise geral da imagem conclu√≠da. Identifiquei elementos relacionados √† sa√∫de e bem-estar.',
                        'confidence': 75.0,
                        'objects': [
                            {'name': 'Objeto de sa√∫de', 'confidence': 85},
                            {'name': 'Elemento fitness', 'confidence': 70}
                        ],
                        'tags': ['sa√∫de', 'bem-estar', 'fitness']
                    }
                }
            
        except Exception as e:
            self.logger.error(f"Erro na an√°lise de imagem: {str(e)}")
            return {'success': False, 'error': str(e)}